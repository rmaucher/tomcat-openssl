<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="tomcat-openssl" basedir=".">
    <description>Builds, tests, and deploys the project tomcat-openssl.</description>
    <loadproperties srcFile="config.properties"/>
    <property name="jar.path" value="${dist}/${jar.name}-${version}.jar"/>
    <path id="tomcat.cp">
        <pathelement location="${tomcat.classpath}"/>
    </path>
    <path id="tomcat.test.cp">
        <pathelement location="${tomcat.classpath}"/>
        <pathelement location="${tomcat.test.classpath}"/>
    </path>
    <target name="prepare">
        <mkdir dir="${build.java}"/>
        <mkdir dir="${dist}"/>
        <copy file="${tomcat.files}/Nio2Endpoint.java" todir="${tomcat.todir}" overwrite="true" force="true"/>
        <copy file="${tomcat.files}/NioEndpoint.java" todir="${tomcat.todir}" overwrite="true" force="true"/>
        <copy file="${tomcat.files}/SSLUtil.java" todir="${tomcat.todir}" overwrite="true" force="true"/>
        <copy file="${tomcat.files}/SslContext.java" todir="${tomcat.todir}" overwrite="true" force="true"/>
        <copy file="${tomcat.files}/jsse/JSSESocketFactory.java" todir="${tomcat.todir}/jsse" overwrite="true" force="true"/>
        <copy file="${tomcat.files}/jsse/JSSESslContext.java" todir="${tomcat.todir}/jsse" overwrite="true" force="true"/>
    </target>
    <target name="compile" depends="prepare">
        <javac destdir="${build.java}" srcdir="${java.src}" classpathref="tomcat.cp" verbose="false" debug="true" debuglevel="lines,vars,source">
        </javac>
        <delete includeEmptyDirs="true">
            <fileset dir="${build.java}/org/apache/tomcat/util"/>
        </delete>
    </target>
    <target name="clean">
        <delete includeEmptyDirs="true">
            <fileset dir="${build.dir}"/>
        </delete>
        <delete includeEmptyDirs="true">
            <fileset dir="${dist}"/>
        </delete>
    </target>
    <target name="package" depends="compile">
        <jar destfile="${jar.path}" basedir="${build.java}"/>
    </target>
        <target name="package-native" depends="package">
        <copy todir="${dist.native-jar}">
            <zipfileset src="${jar.path}" />
        </copy>
        <copy todir="${dist.native-jar}/META-INF/native" includeEmptyDirs="false">
            <zipfileset dir="${native.libs}" />
            <!--<regexpmapper handledirsep="yes" from="^(?:[^/]+/)*([^/]+)$" to="META-INF/native/\1" />-->
        </copy>
        <jar destfile="${jar.native.path}" basedir="${dist.native-jar}" index="true"/>
    </target>
    <target name="build" depends="package-native"/>

    <target name="deploy" depends="build">
        <copy file="${jar.native.path}" toDir="${tomcat.lib}" overwrite="true"/>
        <copy file="resources/server.xml" toDir="${tomcat.conf}" overwrite="true"/>
        <copy file="resources/keystore" toDir="${tomcat.conf}" overwrite="true" force="true"/>
        <copy file="resources/localhost-cert.pem" toDir="${tomcat.conf}" overwrite="true" force="true"/>
        <copy file="resources/localhost-key.pem" toDir="${tomcat.conf}" overwrite="true" force="true"/>
        <copy file="resources/logging.properties" toDir="${tomcat.conf}" overwrite="true" force="true"/>
    </target>
    <target name="run" depends="deploy">
        <exec executable="../tomcat/output/build/bin/catalina.sh">
            <arg value="run"/>
        </exec>
    </target>
    <target name="debug" depends="deploy">
        <exec executable="../tomcat/output/build/bin/catalina.sh">
            <!--<env key="JPDA_SUSPEND" value="yes"/>-->
            <arg value="jpda"/>
            <arg value="start"/>
        </exec>
    </target>
    <target name="stop">
        <exec executable="../tomcat/output/build/bin/catalina.sh">
            <arg value="stop"/>
        </exec>
    </target>
<!--    <target name="compile-test" depends="compile">
        <mkdir dir="${build.test}"/>
        <mkdir dir="${report.dir}"/>
        <javac destdir="${build.test}" srcdir="${java.test}" classpathref="tomcat.test.cp"/>
        <copy todir="output/build">
            <fileset dir="../tomcat/output/build"/>
        </copy>
    </target>
    <target name="test" depends="compile-test">
        <junit>
            <classpath refid="tomcat.test.cp" />
            <classpath>
                
            </classpath>
            <classpath>
                <pathelement location="${build.test}"/>
            </classpath>
            <formatter type="xml" />
            <formatter type="plain" />
            <formatter type="brief" usefile="false" />
            <test name="ch.unibnf.mcs.tomcatopenssl.net.ssl.open.TestSsl" methods="testSimpleSsl" todir="${report.dir}">
                
            </test>
            <batchtest fork="yes" todir="${report.dir}">
                <fileset dir="${java.test}">
                    <include name="**/Test*.java" />
                </fileset>
            </batchtest>
        </junit>
    </target>-->
</project>
